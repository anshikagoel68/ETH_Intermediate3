// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract ERC20Token {
    uint public totalSupply;
    mapping (address => uint) public balances;
    event Transfer(address indexed from, address indexed to, uint amount);
    address public owner;
    constructor() {
        owner = msg.sender;
        totalSupply = 0;
    }
    function mint(address account, uint amount) public returns(bool) {
        require(msg.sender == owner, "Only the owner can mint tokens");
        totalSupply += amount;
        balances[account] += amount;
        emit Transfer(address(0), account, amount);
        return true;
    }
    function transfer(address account, uint amount) public returns(bool) {
        require(balances[msg.sender] >= amount, "Insufficient balance");
        balances[msg.sender] -= amount;
        balances[account] += amount;
        emit Transfer(msg.sender, account, amount);
        return true;
    }
    function burn(uint amount) public returns(bool) {
        require(balances[msg.sender] >= amount, "Insufficient balance");
        balances[msg.sender] -= amount;
        totalSupply -= amount;
        emit Transfer(msg.sender, address(0), amount);
        return true;
    }
    function balanceOf(address _owner) public view returns(uint) {
        return balances[_owner];
    }
}
