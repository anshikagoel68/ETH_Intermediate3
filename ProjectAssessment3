// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract ERC20Token{ 
    uint256 public totalSupply;
    mapping (address=>uint256)public balances;
    mapping (address=>mapping(address=>uint256))public allowed;
    event Transfer(address indexed from,address indexed to,uint256 amount);
    event Approval(address indexed owner,address indexed spender,uint256 amount);
    address public owner;
    constructor(){
        owner=msg.sender;
        totalSupply=0; 
    }
    function mint(address account, uint256 amount)public returns(bool){
        require(msg.sender==owner,"Only the owner can mint tokens");
        totalSupply+=amount;
        balances[account]+=amount;
        emit Transfer(address(0),account,amount);
        return true;
    }
    function transfer(address account,uint256 amount)public returns(bool){
        require(balances[msg.sender]>=amount,"Insufficient balance");
        balances[msg.sender]-=amount;
        balances[account]+= amount;
        emit Transfer(msg.sender,account,amount);
        return true;
    }
    function transferFrom(address fromAccount,address toAccount,uint256 amount)public returns(bool){
        require(balances[fromAccount]>=amount,"Insufficient balance");
        require(allowed[fromAccount][msg.sender]>=amount,"Insufficient allowance");
        balances[fromAccount]-=amount;
        balances[toAccount]+=amount;
        allowed[fromAccount][msg.sender]-=amount;
        emit Transfer(fromAccount,toAccount,amount);
        return true;
    }
    function approve(address spender,uint256 amount) public returns(bool){
        allowed[msg.sender][spender]=amount;
        emit Approval(msg.sender,spender,amount);
        return true;
    }
    function burn(uint256 amount)public returns(bool){
        require(balances[msg.sender]>=amount,"Insufficient balance");
        balances[msg.sender]-=amount;
        totalSupply-=amount;
        emit Transfer(msg.sender,address(0),amount);
        return true;
    }
    function balanceOf(address _owner)public view returns(uint256){
        return balances[_owner];
    }
    function allowance(address _owner,address spender)public view returns(uint256){
        return allowed[_owner][spender];
    }
}
